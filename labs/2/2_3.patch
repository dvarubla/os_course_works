--- 2_1/main_prog.c	2016-03-14 10:34:01.498772900 +0600
+++ 2_3/main_prog.c	2016-03-14 10:34:30.330439200 +0600
@@ -16,22 +16,24 @@
 	uint16_t duration;
 } Note;
 
 #include "melody.h"
 
-bool tick_started, tick_occured, melody_started, melody_played;
+bool tick_started, tick_occured, melody_started;
 
-float tick_counter, melody_counter;
+float tick_counter, melody_counter, ring_duration_counter;
 
 /*интервал между звуковыми тиками, длительность звукового тика*/
 uint16_t tick_interval, tick_duration;
 
 /*интервал, через который начнёт играть мелодия*/
 float ring_interval;
 /*индекс ноты в массиве нот*/
 uint8_t note_index;
 
+uint16_t melody_duration, ring_length;
+
 float ticks_in_ms(float ms){
 	return ms*TICKS_IN_S/MS_IN_S;
 }
 
 void play_note(){
@@ -41,39 +43,40 @@
 		play_sound(notes[note_index].freq);
 	}
 }
 
 void handler_func(){
-	/*мелодия играет 1 раз*/
-	if(!melody_played){
 		melody_counter++;
 		if(!melody_started){
 			if(melody_counter>=ticks_in_ms(ring_interval)){
 				melody_started=true;
 				melody_counter-=ticks_in_ms(ring_interval);
 				/*если звучит тик, нужно его выключить*/
 				if(tick_started){
 					tick_started=false;
 				}
 				note_index=0;
+			ring_duration_counter=0;
 				play_note();		
 			}
 		} else {
+		ring_duration_counter++;
+		if(ring_duration_counter>=ticks_in_ms(ring_length)){
+			stop_sound();
+			melody_started=false;
+		} else if(melody_counter>=ticks_in_ms(notes[note_index].duration)){	
 			/*нота закончила звучать*/
-			if(melody_counter>=ticks_in_ms(notes[note_index].duration)){
 				melody_counter-=ticks_in_ms(notes[note_index].duration);			
 				note_index++;
 				if(note_index==num_notes){
 					stop_sound();
 					melody_started=false;
-					melody_played=true;
 				} else {
 					play_note();
 				}
 			}	
 		}	
-	}
 	/*даже если мелодия начала играть, тики все равно отсчитываются, но не звучат*/
 	tick_counter++;
 	if(tick_started){
 		if(tick_counter>=ticks_in_ms(tick_duration)){
 			tick_started=false;
@@ -120,21 +123,36 @@
 		ring_interval=num_f*MS_IN_S*SEC_IN_MIN;
 	} else {
 		ring_interval=tick_interval*10;
 		printf("Incorrect value. Ring interval set to %f.\r\n", tick_interval_in_minutes*10);
 	}
+
+	printf("Enter ring length (less than %u): ", melody_duration);
+	status=read_number(&num, UINT16_ACT);
+	if(status && num<=melody_duration){
+		ring_length=num;
+	} else {
+		ring_length=melody_duration;
+		printf("Incorrect value. Ring length set to %u.\r\n", ring_length);
+	}
+	
 }
 
 INTERRUPT_ROUTINE(1C, handler_func);
 
 void main(){
 	set_mode();
 
 	tick_duration=DEF_TICK_DURATION;
 
-	tick_counter=melody_counter=0;
-	tick_started=tick_occured=melody_started=melody_played=false;
+	tick_counter=melody_counter=ring_duration_counter=0;
+	tick_started=tick_occured=melody_started=false;
+	
+	melody_duration=0;
+	for(uint8_t i=0; i<num_notes; i++){
+		melody_duration+=notes[i].duration;
+	}
 
 	print_color("Lab 2", YELLOW);
 	read_params();
 	//disable_int();
 	//outb(0x43, 0x36);

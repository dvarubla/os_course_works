--- 4_1/main_prog.c	2016-04-13 11:51:32.973994300 +0600
+++ 4_3/main_prog.c	2016-04-13 12:56:46.653162100 +0600
@@ -41,12 +41,12 @@
 uint16_t max_time_slice;
 /*текущий квант*/
 uint16_t cur_time_slice;
 /*нужно ли передать управление другому потоку, независимо от кванта*/
 uint32_t skip_time_slice;
-/*был ли запущен поток, нужно ли генерировать новые числа, завершился ли производитель*/
-uint32_t thread_switched, generate_more_numbers, producer_finished;
+/*был ли запущен поток, нужно ли генерировать новые числа*/
+uint32_t thread_switched, generate_more_numbers;
 
 uint16_t get_cur_thread_id(){
 	return atomic_read(&cur_thread_id);
 }
 
@@ -57,21 +57,30 @@
 
 void producer();
 void consumer();
 void idle();
 
-Thread threads[]={
-	{(uint32_t)idle, 0},
-	{(uint32_t)producer, 0.5}, 
-	{(uint32_t)consumer, 0.5}
+#define MAX_THREADS 10
+#define DEF_NUM_THREADS 2
+
+Thread threads[MAX_THREADS+1]={
+	{(uint32_t)idle, 0}
 };
 
-#define NUM_THREADS (sizeof(threads)/sizeof(Thread))
+uint16_t num_threads;
+/*число незавершившихся производителей*/
+uint16_t producers_left;
+/*число потребителей*/
+uint16_t num_consumers;
+/*был ли запущен хоть один поток-производитель*/
+bool no_producers;
 
 Sema 
 	/*мьютекс для вывода на экран*/
 	print_sema, 
+	/*мьютекс для уменьшения числа производителей*/
+	producers_left_sema,
 	buffer_op_sema, full_sema, empty_sema;
 
 /*области экрана для вывода информации*/
 TextBlock 
 	producer_block={0, 1, SCREEN_COLS-1, 3, true, 0, 1}, 
@@ -97,10 +106,18 @@
 } cursor_pos[MAX_BUF_SIZE+1]={
 	{0, 4}
 }; 
 volatile uint32_t buffer_index;
 
+/*когда все потоки-производители завершились, продолжить потоки-потребители*/
+void continue_all_consumers(){
+	for(uint16_t i=0; i<num_consumers; i++){
+		/*поток-потребитель может ждать на этом семафоре*/
+		sema_v(&full_sema);
+	}
+}
+
 /*вывести, какой поток активен*/
 void print_status(char ch, uint8_t color){
 	if(atomic_read(&thread_switched)){
 		sema_p(&print_sema);
 		printf_in_block(&thread_status_block, "%C%c", color, ch);
@@ -153,12 +170,22 @@
 }
 /*удалить число из буфера*/
 uint32_t remove(){
 	uint32_t prime;
 	sema_p(&full_sema);
-	/*производитель завершился - значение семафора full_sema никто не увеличит*/
-	if(atomic_read(&producer_finished)==true && buffer_index==0){	
+	/*проверка, завершились ли производители*/
+	bool return_zero=false;	
+	sema_p(&producers_left_sema);
+	if(producers_left==0){
+		sema_p(&buffer_op_sema);	
+		if(buffer_index==0){
+			return_zero=true;
+		}
+		sema_v(&buffer_op_sema);
+	}
+	sema_v(&producers_left_sema);
+	if(return_zero){
 		return 0;
 	}
 	sema_p(&buffer_op_sema);
 	buffer_index--;
 	prime=buffer[buffer_index];
@@ -199,23 +226,32 @@
 		sema_v(&print_sema);
 		append(prime);
 		sleep_msec(delay_interval);
 		//sleep_msec(rand_uint32()%delay_interval);
 	}
-	atomic_write(&producer_finished, true);
-	/*поток-потребитель может ждать на этом семафоре*/
-	sema_v(&full_sema);
+	sema_p(&producers_left_sema);
+	producers_left--;
+	if(producers_left==0){
+		continue_all_consumers();
+	}
+	sema_v(&producers_left_sema);
 }
 
 void consumer(){
 	uint32_t prime;
 	while(1){
 		print_status('C', BRIGHT_WHITE);
 		prime=remove();
 		/*кончились ли числа в буфере*/
 		if(prime==0){
+			sema_p(&print_sema);
 			printf_in_block(&thread_status_block, "%C%c", LIGHT_MAGENTA, 'X');
+			/*ни один поток так и не вывел процент заполненности буфера*/
+			if(no_producers){
+				print_buf_percent();
+			}
+			sema_v(&print_sema);
 			break;
 		}
 		sema_p(&print_sema);
 		printf_in_block(&consumer_block, "%C%u ", BRIGHT_WHITE, prime);
 		sema_v(&print_sema);
@@ -272,11 +308,11 @@
 void int8_handler_func(){
 	thread_tick_counter++;
 	call_bios_handler_counter++;
 	uint16_t i;
 	/*проверки, нужно ли закончить ожидание потокам*/
-	for(i=1; i<NUM_THREADS; i++){
+	for(i=1; i<num_threads; i++){
 		if((threads[i].sleep & (SLEEPING|TIME_SLEEP))==(SLEEPING|TIME_SLEEP)){
 			if(threads[i].sleep_counter==0){
 				threads[i].sleep=NO_SLEEP;
 			} else {
 				threads[i].sleep_counter--;
@@ -298,11 +334,11 @@
 		float rand_priority=(float)rand_double();
 		
 		/*нужно скорректировать rand_priority 
 		с учётом того, что некоторые потоки ждут*/
 		float priority_sum=0;		
-		for(i=1; i<NUM_THREADS; i++){
+		for(i=1; i<num_threads; i++){
 			if(!threads[i].finished){
 				if(!(threads[i].sleep & SLEEPING)){
 					priority_sum+=threads[i].priority;
 					have_not_sleeping_threads=true;
 				}
@@ -320,20 +356,20 @@
 		} else {
 			cur_time_slice=rand_uint32()%max_time_slice+1;
 			rand_priority*=priority_sum;
 			priority_sum=0;
 			/*выбор потока, который будет возобновлён*/
-			for(i=1; i<NUM_THREADS-1; i++){
+			for(i=1; i<num_threads-1; i++){
 				if(!threads[i].finished && !(threads[i].sleep & SLEEPING)){
 					priority_sum+=threads[i].priority;
 					if(priority_sum>=rand_priority){
 						switch_to_thread(i);
 						break;
 					}
 				}
 			}
-			if(i==NUM_THREADS-1){
+			if(i==num_threads-1){
 				switch_to_thread(i);
 			}
 		}
 	}
 	/*нужно ли вызвать старый обработчик прерывания*/
@@ -378,11 +414,11 @@
 );
 
 void init_threads()
 {
 	uint16_t i;
-	for(i=0; i<NUM_THREADS; i++){
+	for(i=0; i<num_threads; i++){
 		threads[i].finished=false;
 		threads[i].sleep=NO_SLEEP;
 		/*нужно инициализировать начальный кадр стека*/
 		asm volatile(
 			/*сохранить значение вершины стека*/
@@ -418,22 +454,25 @@
 	}
 	sema_init(&print_sema, 1);
 	sema_init(&empty_sema, buf_size);
 	sema_init(&full_sema, 0);
 	sema_init(&buffer_op_sema, 1);
+	sema_init(&producers_left_sema, 1);
 	generate_more_numbers=true;
-	producer_finished=false;
 	skip_time_slice=false;	
+	if(no_producers){
+		continue_all_consumers();
+	}
 }
 
 #define ESC 0x01
 #define RELEASED_FLAG 0x80
 
 void int9_handler_func(){
 	uint8_t key=inb(0x60);
 	if(key==(ESC | RELEASED_FLAG)){
-		/*завершить поток-производитель*/
+		/*завершить потоки-производители*/
 		generate_more_numbers=false;
 	}
 	call_int_addr(&prev_int9_addr);
 }
 
@@ -475,10 +514,35 @@
 		max_time_slice=num16;
 	} else {
 		max_time_slice=DEF_MAX_TIME_SLICE;
 		print("Incorrect value. Max time slice set to "PASTE(DEF_MAX_TIME_SLICE)".\r\n");
 	}
+
+	print("Enter number of producer/consumer threads: ");
+	status=read_number(&num16, UINT16_ACT);
+	if(status && num16<=MAX_THREADS){
+		num_threads=num16+1;
+	} else {
+		num_threads=DEF_NUM_THREADS+1;
+		print("Incorrect value. Number of threads set to "PASTE(DEF_NUM_THREADS)".\r\n");
+	}
+	producers_left=0;
+	float def_priority=1.0/(num_threads-1);
+	for(uint16_t i=1; i<num_threads; i++){
+		bool is_producer=
+		//true;
+		//false;
+		(rand_uint32()%2==1);
+		threads[i].func=(uint32_t)((is_producer)?producer:consumer);	
+		threads[i].priority=def_priority;
+		if(is_producer){
+			producers_left++;
+		}
+	}
+	num_consumers=num_threads-producers_left;
+	printf("Number of producers: %u\r\n", producers_left);
+	no_producers=(producers_left==0);
 	print("Print enter: ");
 	get_key();
 }
 
 void main(){
